---
AWSTemplateFormatVersion: '2010-09-09'
Description: "Xenial (20161214 AMI Build) - Autoscale Base Template"

Parameters:
###############################################################################
# Instance and Network Configuration
###############################################################################
  VPC:
    Description: Choose VPC to use
    Type: AWS::EC2::VPC::Id
    Default: ''

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  InstanceMaxCount:
    Type: String
    Default: '2'
    Description: Set max number of instances to autoscale up to

  InstanceMinCount:
    Type: String
    Default: '1'
    Description: Set minimum number of instances to run

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  SSHSecurityGroup:
    Description: Select Security Group for SSH Access
    Type: AWS::EC2::SecurityGroup::Id
    Default: ''

  CIDRA:
    Type: String
    Default: 172.33.10.0/24
    Description: Subnet A CIDR Block

  CIDRB:
    Type: String
    Default: 172.33.20.0/24
    Description: Subnet A CIDR Block

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label:
        default: Instance & Network Configuration
      Parameters:
        - InstanceType
        - InstanceMaxCount
        - InstanceMinCount
        - KeyName
        - VPC
        - SSHSecurityGroup
        - CIDRA
        - CIDRB

Mappings:
  RegionMap:
    us-west-2:
      HVM64: ami-b7a114d7
    eu-west-1:
      HVM64: ami-6f587e1c

Resources:
  # Create the necessary subnets for ELB
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      # Get Availability Zones and select first in string
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: !Ref CIDRA
      Tags:
        - Key: Name
          Value: Public-Subnet-A
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: "Public"
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      # Get Availability Zones and select second in string
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: !Ref CIDRB
      Tags:
        - Key: Name
          Value: Public-Subnet-B
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: "Public"

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Server Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: ELB-SecurityGroup

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      LBCookieStickinessPolicy:
        - PolicyName: PublicELBCookieStickinessPolicy
          CookieExpirationPeriod: '3600'
      Listeners:
        - InstancePort: '80'
          LoadBalancerPort: '80'
          InstanceProtocol: HTTP
          Protocol: HTTP
          PolicyNames:
            - PublicELBCookieStickinessPolicy
      HealthCheck:
        Target: "HTTP:80/humans.txt"
        HealthyThreshold: '2'
        UnhealthyThreshold: '10'
        Interval: '90'
        Timeout: '60'
      Tags:
        - Key: Name
          Value: ELB

  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '9090'
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '9090'
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Server-Security-Group

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  # Just a placeholder role, please don't use this for real!
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "root"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: "*"
            Resource: "*"
      Roles:
        - !Ref InstanceRole

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref InstanceRole

  AutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - !Select [ 0, !GetAZs "" ]
        - !Select [ 1, !GetAZs "" ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB
      LaunchConfigurationName: !Ref ServerLaunchConfig
      MinSize: !Ref InstanceMinCount
      MaxSize: !Ref InstanceMaxCount
      LoadBalancerNames:
      - !Ref ElasticLoadBalancer
      Tags:
      - Key: Name
        Value: AutoScale-Group
        PropagateAtLaunch: 'true'

  ServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", HVM64 ]
      AssociatePublicIpAddress: 'true'
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref ServerSecurityGroup
        - !Ref SSHSecurityGroup
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: '15'
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        "Fn::Base64":
          "Fn::Sub": |
            #!/bin/bash -xev

            ##########################################################
            # Upgrade OS & Install Dependencies
            ##########################################################

            apt-get update && apt-get -y upgrade
            apt-get install -y wget curl python-setuptools python-pip git

            ##########################################################
            # Global Variable Set
            ##########################################################

            export DEBIAN_FRONTEND=noninteractive
            export INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            export STACKNAME='${AWS::StackName}'

            ##########################################################
            # Install cfn bootstraping tools
            ##########################################################

            if [ -z $(command -v cfn-signal) ]; then
                easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            fi

            ##########################################################
            # Helper function to set wait timer
            ##########################################################

            error_exit()
            {
              cfn-signal -e 1 -r "$1" "${WaitHandle}"
              exit 1
            }

            export -f error_exit

            ##########################################################
            # Scripts and Functions go here
            ##########################################################

            ## INSTALL ITEMS

            ##########################################################
            # Send Success Signal to CFN Wait Handle
            ##########################################################

            /usr/local/bin/cfn-signal -e 0 -r 'Server setup complete' "${WaitHandle}"

            ##########################################################
            # Reboot After Success for all updates made
            ##########################################################

            reboot

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: ServerLaunchConfig
    Properties:
      Handle:  !Ref WaitHandle
      Timeout: '2300'
